[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dragonsec"
version = "0.1.0"
description = "A comprehensive security scanning tool that combines static analysis with AI-powered vulnerability detection"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [
    { name = "DragonSec Team", email = "team@dragonsec.com" }
]
dependencies = [
    # AI Providers
    "openai",
    "google-generativeai",

    # Security Scanning
    "semgrep",

    # Async Support
    "aiohttp",

    # Utilities
    "python-dotenv",
    "requests",
    "pyyaml",
    "tenacity",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "black",
    "flake8",
    "mypy",
    "PyYAML",
    "python-dotenv"
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "--cov=dragonsec --cov-report=term-missing"
asyncio_default_fixture_loop_scope = "function"
asyncio_default_test_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning:google._upb._message",
]

[tool.coverage.run]
source = ["dragonsec"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
omit = ["tests/*"]
